struct MyStruct{
    bool myBool;
    int myInt;
};

bool globalBool;
int globalInt;
struct MyStruct globalStruct;
bool functionFour() {
    bool localBool;
    localBool(bool) = false;
    while ((globalInt(int) > 100)) {
        if (functionFour(->bool)()) {
            if ((!localBool(bool))) {
                cout << "Local Bool";
                (globalStruct(MyStruct)).myBool(bool) = localBool(bool);
                (globalStruct(MyStruct)).myInt(int) = 1;
            }
            else {
                cout << "Local bool failed me";
                globalBool(bool) = ((-globalInt(int)) < 120120);
                globalInt(int) = 123;
            }
        }
    }
}

int functionThree() {
    int localIntA;
    int localIntB;
    bool localBool;
    localIntA(int) = 120;
    localIntB(int) = 121;
    localBool(bool) = true;
    globalInt(int) = (localIntA(int) + localIntB(int));
    globalInt(int) = (localIntA(int) - localIntB(int));
    globalInt(int) = (localIntA(int) * localIntB(int));
    globalInt(int) = (localIntA(int) / localIntB(int));
    globalInt(int)++;
    globalInt(int)--;
    globalInt(int) = (-(localIntA(int) + localIntB(int)));
    globalBool(bool) = (!localBool(bool));
}

bool functionTwo(int a, bool b) {
    struct MyStruct myStruct;
    (myStruct(MyStruct)).myBool(bool) = globalBool(bool);
    (myStruct(MyStruct)).myInt(int) = globalInt(int);
    (myStruct(MyStruct)).myBool(bool) = b(bool);
    (myStruct(MyStruct)).myInt(int) = a(int);
}

void functionOne() {
    int globalBool;
    bool globalInt;
    int returnVal;
    globalBool(int) = 10;
    globalInt(bool) = false;
    if (functionTwo(int,bool->bool)(globalBool(int), globalInt(bool))) {
        return returnVal(int);
    }
    else {
        globalBool(int) = functionThree(->int)();
    }
}

int main() {
    globalBool(bool) = true;
    globalInt(int) = 42;
    (globalStruct(MyStruct)).myBool(bool) = false;
    (globalStruct(MyStruct)).myInt(int) = 12;
    functionOne(->void)();
    return 0;
}

